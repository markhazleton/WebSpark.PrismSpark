@model List<WebSpark.PrismSpark.Demo.Models.CodeSnippet>
@{
    ViewData["Title"] = "PrismSpark Demo - Enhanced Code Syntax Highlighting";
}

<div class="text-center">
    <h1 class="display-4">PrismSpark Demo</h1>
    <p>Learn about <a href="https://github.com/MarkHazleton/WebSpark.PrismSpark">WebSpark.PrismSpark</a> - A powerful
        .NET syntax highlighting library.</p>
</div>
<div class="container">
    <h1>Enhanced Code Syntax Highlighting & Validation</h1>
    <p class="lead">This demo showcases server-side syntax highlighting using WebSpark.PrismSpark with client-side
        validation capabilities.</p>

    @foreach (var snippet in Model)
    {
        <!-- @snippet.Language Section -->
        <div class="language-section">
            <div class="language-header">
                @snippet.Title
            </div>
            <div class="code-container">
                <pre><code class="language-@snippet.Language" id="@snippet.Language-code">@Html.Raw(snippet.HighlightedCode)</code></pre>
            </div>
            <div class="validation-controls">
                <button class="btn" onclick="validateCode('@snippet.Language')">Validate
                    @snippet.Language.ToUpper()</button>
                <button class="btn btn-success" onclick="formatCode('@snippet.Language')">Format
                    @snippet.Language.ToUpper()</button>
                <button class="btn btn-info" onclick="highlightCode('@snippet.Language')">Re-highlight</button>
                <button class="btn btn-danger" onclick="clearResult('@snippet.Language')">Clear</button>
                <div class="validation-result" id="@snippet.Language-result"></div>
            </div>
        </div>
    }

    <!-- Statistics Section -->
    <div class="stats-container">
        <div class="stat-card">
            <div class="stat-number" id="total-validations">0</div>
            <div class="stat-label">Total Validations</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="success-rate">0%</div>
            <div class="stat-label">Success Rate</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="avg-time">0ms</div>
            <div class="stat-label">Avg Execution Time</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="languages-tested">@Model.Count</div>
            <div class="stat-label">Languages Supported</div>
        </div>
    </div>

    <!-- Live Editor Section -->
    <div class="live-editor-section">
        <h2>Live Code Editor</h2>
        <div class="editor-controls">
            <select id="language-selector" class="form-select">
                <option value="json">JSON</option>
                <option value="csharp">C#</option>
                <option value="javascript">JavaScript</option>
                <option value="python">Python</option>
                <option value="sql">SQL</option>
                <option value="html">HTML</option>
                <option value="css">CSS</option>
            </select>
            <button class="btn btn-primary" onclick="highlightLiveCode()">Highlight</button>
            <button class="btn btn-success" onclick="validateLiveCode()">Validate</button>
            <button class="btn btn-info" onclick="formatLiveCode()">Format</button>
        </div>
        <textarea id="live-editor" class="form-control" rows="10" placeholder="Enter your code here..."></textarea>
        <div id="live-preview" class="code-preview"></div>
        <div id="live-result" class="validation-result"></div>
    </div>
</div>

<style>
    /* Enhanced Prism Styles */
    .language-section {
        margin: 2rem 0;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .language-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        font-weight: bold;
        font-size: 1.1rem;
    }

    .code-container {
        position: relative;
        background: #f8f9fa;
        max-height: 500px;
        overflow: auto;
    }

    .code-container pre {
        margin: 0;
        padding: 1rem;
        background: transparent;
        border: none;
    }

    .code-container code {
        font-family: 'Courier New', Consolas, 'Ubuntu Mono', monospace;
        font-size: 0.9rem;
        line-height: 1.5;
    }

    .validation-controls {
        padding: 1rem;
        background: #f1f3f4;
        border-top: 1px solid #e0e0e0;
    }

    .validation-controls .btn {
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .validation-result {
        margin-top: 1rem;
        padding: 1rem;
        border-radius: 4px;
        min-height: 50px;
    }

    .validation-result.success {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }

    .validation-result.error {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }

    .validation-result.info {
        background: #d1ecf1;
        border: 1px solid #bee5eb;
        color: #0c5460;
    }

    .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 2rem 0;
        padding: 2rem;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        border-radius: 8px;
    }

    .stat-card {
        text-align: center;
        padding: 1.5rem;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: #667eea;
        margin-bottom: 0.5rem;
    }

    .stat-label {
        color: #666;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .live-editor-section {
        margin: 3rem 0;
        padding: 2rem;
        background: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
    }

    .editor-controls {
        margin-bottom: 1rem;
        display: flex;
        gap: 1rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .editor-controls select {
        width: auto;
        min-width: 150px;
    }

    #live-editor {
        font-family: 'Courier New', Consolas, 'Ubuntu Mono', monospace;
        font-size: 0.9rem;
        margin-bottom: 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .code-preview {
        background: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 1rem;
        margin-bottom: 1rem;
        min-height: 100px;
        max-height: 300px;
        overflow: auto;
    }

    .code-preview pre {
        margin: 0;
        background: transparent;
        border: none;
    }

    /* Token styles for syntax highlighting */
    .token.comment,
    .token.prolog,
    .token.doctype,
    .token.cdata {
        color: #6a737d;
        font-style: italic;
    }

    .token.punctuation {
        color: #24292e;
    }

    .token.property,
    .token.tag,
    .token.constant,
    .token.symbol,
    .token.deleted {
        color: #d73a49;
    }

    .token.boolean,
    .token.number {
        color: #005cc5;
    }

    .token.selector,
    .token.attr-name,
    .token.string,
    .token.char,
    .token.builtin,
    .token.inserted {
        color: #032f62;
    }

    .token.operator,
    .token.entity,
    .token.url,
    .language-css .token.string,
    .style .token.string,
    .token.variable {
        color: #e36209;
    }

    .token.atrule,
    .token.attr-value,
    .token.function,
    .token.class-name {
        color: #6f42c1;
    }

    .token.keyword {
        color: #d73a49;
        font-weight: bold;
    }

    .token.regex,
    .token.important {
        color: #e90;
    }

    .token.important,
    .token.bold {
        font-weight: bold;
    }

    .token.italic {
        font-style: italic;
    }

    .token.entity {
        cursor: help;
    }

    /* Loading indicator */
    .loading {
        position: relative;
        pointer-events: none;
    }

    .loading::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 20px;
        height: 20px;
        margin: -10px 0 0 -10px;
        border: 2px solid #ccc;
        border-top-color: #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>

<script>
    // Enhanced client-side functionality
    let validationStats = {
        totalValidations: 0,
        successfulValidations: 0,
        executionTimes: []
    };

    async function validateCode(language)
    {
        const codeElement = document.getElementById(`${language}-code`);
        const resultElement = document.getElementById(`${language}-result`);

        if (!codeElement || !resultElement) return;

        const code = codeElement.textContent || codeElement.innerText;

        try
        {
            resultElement.className = 'validation-result loading';
            resultElement.innerHTML = 'Validating...';

            const startTime = performance.now();

            const response = await fetch('/Home/ValidateCode', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ code, language })
            });

            const endTime = performance.now();
            const executionTime = endTime - startTime;

            const result = await response.json();

            updateValidationStats(result.isValid, executionTime);
            displayValidationResult(resultElement, result, executionTime);

        } catch (error)
        {
            console.error('Validation error:', error);
            resultElement.className = 'validation-result error';
            resultElement.innerHTML = `<strong>Error:</strong> ${error.message}`;
        }
    }

    async function formatCode(language)
    {
        const codeElement = document.getElementById(`${language}-code`);
        const resultElement = document.getElementById(`${language}-result`);

        if (!codeElement || !resultElement) return;

        const code = codeElement.textContent || codeElement.innerText;

        try
        {
            resultElement.className = 'validation-result loading';
            resultElement.innerHTML = 'Formatting...';

            const response = await fetch('/Home/FormatCode', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ code, language })
            });

            const result = await response.json();

            if (result.success)
            {
                // Update the code display with formatted code
                codeElement.innerHTML = result.formattedCode;

                resultElement.className = 'validation-result success';
                resultElement.innerHTML = '<strong>Success:</strong> Code formatted successfully!';
            } else
            {
                resultElement.className = 'validation-result error';
                resultElement.innerHTML = `<strong>Error:</strong> ${result.error}`;
            }

        } catch (error)
        {
            console.error('Formatting error:', error);
            resultElement.className = 'validation-result error';
            resultElement.innerHTML = `<strong>Error:</strong> ${error.message}`;
        }
    }

    async function highlightCode(language)
    {
        const codeElement = document.getElementById(`${language}-code`);
        const resultElement = document.getElementById(`${language}-result`);

        if (!codeElement || !resultElement) return;

        const code = codeElement.textContent || codeElement.innerText;

        try
        {
            resultElement.className = 'validation-result loading';
            resultElement.innerHTML = 'Highlighting...';

            const response = await fetch('/Home/HighlightCode', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ code, language })
            });

            const result = await response.json();

            if (result.success)
            {
                // Update the code display with highlighted code
                codeElement.innerHTML = result.highlightedCode;

                resultElement.className = 'validation-result success';
                resultElement.innerHTML = '<strong>Success:</strong> Code highlighted successfully!';
            } else
            {
                resultElement.className = 'validation-result error';
                resultElement.innerHTML = `<strong>Error:</strong> ${result.error}`;
            }

        } catch (error)
        {
            console.error('Highlighting error:', error);
            resultElement.className = 'validation-result error';
            resultElement.innerHTML = `<strong>Error:</strong> ${error.message}`;
        }
    }

    function clearResult(language)
    {
        const resultElement = document.getElementById(`${language}-result`);
        if (resultElement)
        {
            resultElement.className = 'validation-result';
            resultElement.innerHTML = '';
        }
    }

    // Live editor functionality
    async function highlightLiveCode()
    {
        const editor = document.getElementById('live-editor');
        const preview = document.getElementById('live-preview');
        const languageSelect = document.getElementById('language-selector');

        const code = editor.value;
        const language = languageSelect.value;

        if (!code.trim())
        {
            preview.innerHTML = '<p class="text-muted">Enter code to see highlighted output...</p>';
            return;
        }

        try
        {
            preview.innerHTML = '<p class="text-muted">Highlighting...</p>';

            const response = await fetch('/Home/HighlightCode', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ code, language })
            });

            const result = await response.json();

            if (result.success)
            {
                preview.innerHTML = `<pre><code class="language-${language}">${result.highlightedCode}</code></pre>`;
            } else
            {
                preview.innerHTML = `<p class="text-danger">Error: ${result.error}</p>`;
            }

        } catch (error)
        {
            console.error('Live highlighting error:', error);
            preview.innerHTML = `<p class="text-danger">Error: ${error.message}</p>`;
        }
    }

    async function validateLiveCode()
    {
        const editor = document.getElementById('live-editor');
        const result = document.getElementById('live-result');
        const languageSelect = document.getElementById('language-selector');

        const code = editor.value;
        const language = languageSelect.value;

        if (!code.trim())
        {
            result.innerHTML = '<p class="text-muted">Enter code to validate...</p>';
            return;
        }

        try
        {
            result.className = 'validation-result loading';
            result.innerHTML = 'Validating...';

            const startTime = performance.now();

            const response = await fetch('/Home/ValidateCode', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ code, language })
            });

            const endTime = performance.now();
            const executionTime = endTime - startTime;

            const validationResult = await response.json();

            updateValidationStats(validationResult.isValid, executionTime);
            displayValidationResult(result, validationResult, executionTime);

        } catch (error)
        {
            console.error('Live validation error:', error);
            result.className = 'validation-result error';
            result.innerHTML = `<strong>Error:</strong> ${error.message}`;
        }
    }

    async function formatLiveCode()
    {
        const editor = document.getElementById('live-editor');
        const result = document.getElementById('live-result');
        const languageSelect = document.getElementById('language-selector');

        const code = editor.value;
        const language = languageSelect.value;

        if (!code.trim())
        {
            result.innerHTML = '<p class="text-muted">Enter code to format...</p>';
            return;
        }

        try
        {
            result.className = 'validation-result loading';
            result.innerHTML = 'Formatting...';

            const response = await fetch('/Home/FormatCode', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ code, language })
            });

            const formatResult = await response.json();

            if (formatResult.success)
            {
                // Extract text content from formatted HTML
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = formatResult.formattedCode;
                const formattedText = tempDiv.textContent || tempDiv.innerText || '';

                editor.value = formattedText;
                result.className = 'validation-result success';
                result.innerHTML = '<strong>Success:</strong> Code formatted successfully!';

                // Auto-highlight the formatted code
                setTimeout(() => highlightLiveCode(), 100);
            } else
            {
                result.className = 'validation-result error';
                result.innerHTML = `<strong>Error:</strong> ${formatResult.error}`;
            }

        } catch (error)
        {
            console.error('Live formatting error:', error);
            result.className = 'validation-result error';
            result.innerHTML = `<strong>Error:</strong> ${error.message}`;
        }
    }

    function updateValidationStats(isValid, executionTime)
    {
        validationStats.totalValidations++;
        if (isValid) validationStats.successfulValidations++;
        validationStats.executionTimes.push(executionTime);

        // Update UI
        document.getElementById('total-validations').textContent = validationStats.totalValidations;

        const successRate = Math.round((validationStats.successfulValidations / validationStats.totalValidations) * 100);
        document.getElementById('success-rate').textContent = `${successRate}%`;

        const avgTime = validationStats.executionTimes.reduce((a, b) => a + b, 0) / validationStats.executionTimes.length;
        document.getElementById('avg-time').textContent = `${Math.round(avgTime)}ms`;
    }

    function displayValidationResult(element, result, executionTime)
    {
        const className = result.isValid ? 'validation-result success' : 'validation-result error';
        const icon = result.isValid ? '✓' : '✗';

        element.className = className;
        element.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;">
            <div>
                <strong>${icon} ${result.message}</strong>
            </div>
            <div style="font-size: 0.9rem; color: #666;">
                Execution time: ${Math.round(executionTime)}ms
            </div>
        </div>
    `;
    }

    // Auto-highlight live code as user types (debounced)
    let highlightTimeout;
    document.getElementById('live-editor').addEventListener('input', function ()
    {
        clearTimeout(highlightTimeout);
        highlightTimeout = setTimeout(() =>
        {
            if (this.value.trim())
            {
                highlightLiveCode();
            }
        }, 1000);
    });

    // Initialize with some sample code
    document.addEventListener('DOMContentLoaded', function ()
    {
        const editor = document.getElementById('live-editor');
        editor.value = `{
  "name": "Live Editor Demo",
  "version": "1.0.0",
  "description": "Try editing this JSON!",
  "highlight": true
}`;

        // Initial highlight
        setTimeout(() => highlightLiveCode(), 500);
    });
</script>
