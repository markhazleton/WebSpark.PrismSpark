// Auto generated by ./transform.js
using System.Text.RegularExpressions;
using WebSpark.PrismSpark;

namespace WebSpark.PrismSpark.Languages;

// From https://github.com/PrismJS/prism/blob/master/components/prism-cil.js

/// <summary>
/// Provides syntax highlighting grammar definition for CIL (Common Intermediate Language).
/// Supports CIL syntax including comments, strings, directives, opcodes, and keywords used in .NET bytecode.
/// </summary>
public class Cil : IGrammarDefinition
{
    /// <summary>
    /// Defines the grammar rules for CIL syntax highlighting.
    /// </summary>
    /// <returns>A Grammar object containing the token definitions for CIL (MSIL) language syntax.</returns>
    public Grammar Define()
    {
        var grammar = new Grammar();

        grammar["comment"] = new GrammarToken[]
        {

        new(@"\/\/.*", lookbehind: false, greedy: false),
        };
        grammar["string"] = new GrammarToken[]
        {

        new(@"([""'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1", lookbehind: false, greedy: true),
        };
        grammar["directive"] = new GrammarToken[]
        {

        new(@"(^|\W)\.[a-z]+(?=\s)", lookbehind: true, greedy: false, alias: new []{"class-name" }),
        };
        grammar["variable"] = new GrammarToken[]
        {

        new(@"\[[\w\.]+\]", lookbehind: false, greedy: false),
        };
        grammar["keyword"] = new GrammarToken[]
        {

        new(@"\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|u?int(?:8|16|32|64)?|iant|idispatch|implements|import|initonly|instance|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\b", lookbehind: false, greedy: false),
        };
        grammar["function"] = new GrammarToken[]
        {

        new(@"\b(?:(?:constrained|no|readonly|tail|unaligned|volatile)\.)?(?:conv\.(?:[iu][1248]?|ovf\.[iu][1248]?(?:\.un)?|r\.un|r4|r8)|ldc\.(?:i4(?:\.\d+|\.[mM]1|\.s)?|i8|r4|r8)|ldelem(?:\.[iu][1248]?|\.r[48]|\.ref|a)?|ldind\.(?:[iu][1248]?|r[48]|ref)|stelem\.?(?:i[1248]?|r[48]|ref)?|stind\.(?:i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\.[0-3s]|a(?:\.s)?)?|ldloc(?:\.\d+|\.s)?|sub(?:\.ovf(?:\.un)?)?|mul(?:\.ovf(?:\.un)?)?|add(?:\.ovf(?:\.un)?)?|stloc(?:\.[0-3s])?|refany(?:type|val)|blt(?:\.un)?(?:\.s)?|ble(?:\.un)?(?:\.s)?|bgt(?:\.un)?(?:\.s)?|bge(?:\.un)?(?:\.s)?|unbox(?:\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\.s)?|bne\.un(?:\.s)?|ldloca(?:\.s)?|brzero(?:\.s)?|brtrue(?:\.s)?|brnull(?:\.s)?|brinst(?:\.s)?|starg(?:\.s)?|leave(?:\.s)?|shr(?:\.un)?|rem(?:\.un)?|div(?:\.un)?|clt(?:\.un)?|alignment|castclass|ldvirtftn|beq(?:\.s)?|ckfinite|ldsflda|ldtoken|localloc|mkrefany|rethrow|cgt\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|cgt|ceq|box|and|or|br)\b", lookbehind: false, greedy: false),
        };
        grammar["boolean"] = new GrammarToken[]
        {

        new(@"\b(?:false|true)\b", lookbehind: false, greedy: false),
        };
        grammar["number"] = new GrammarToken[]
        {

        new(new Regex(@"\b-?(?:0x[0-9a-f]+|\d+)(?:\.[0-9a-f]+)?\b", RegexOptions.Compiled | RegexOptions.IgnoreCase), lookbehind: false, greedy: false),
        };
        grammar["punctuation"] = new GrammarToken[]
        {

        new(@"[{}[\];(),:=]|IL_[0-9A-Za-z]+", lookbehind: false, greedy: false),
        };

        return grammar;
    }
}
